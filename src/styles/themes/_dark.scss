@use 'sass:map';

// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '~@angular/material' as mat;
@use "app" as app;

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$app-primary: mat.define-palette(mat.$indigo-palette);
$app-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$app-warn: mat.define-palette(mat.$red-palette);

// Additional palettes
$app-success: mat.define-palette(mat.$light-green-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$app-theme: mat.define-dark-theme((
  color: (
    primary: $app-primary,
    accent: $app-accent,
    warn: $app-warn,
  )
));

// Insert custom background color
$background: map.get($app-theme, background);
$background: map.merge($background, (background: #303030));

// Add additional palettes
//noinspection CssInvalidFunction
$app-theme: map.deep-merge(
    $app-theme,
    (
      color: (
        success: $app-success,
        background: $background
      ),
    )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@mixin build() {
  // See https://github.com/angular/components/blob/master/guides/duplicate-theming-styles.md
  @include mat.all-component-colors($app-theme);
  @include app.theme($app-theme);
}
